#!/usr/bin/env node
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var run = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    var dir, exists;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            dir = cli.input[0] || './docs';
            _context.next = 3;
            return (0, _pathExists2.default)(cwd(dir));

          case 3:
            exists = _context.sent;

            console.log();

            if (!(exists && !cli.flags.force)) {
              _context.next = 7;
              break;
            }

            return _context.abrupt('return', console.log(_chalk2.default.red('  > dir ' + dir + ' already exists, use `docute init ' + dir + ' --force` to override it\n')));

          case 7:
            _context.next = 9;
            return (0, _gracefulCopy2.default)(ownDir('./template'), cwd(dir), {
              data: {
                version: cli.flags.docuteVersion || 'latest'
              }
            });

          case 9:
            console.log(_chalk2.default.green('  > Successfully generated boilerplates for docs!'));
            console.log('  > Run `docute ' + dir + '` to preview docs');
            console.log();

          case 12:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function run() {
    return _ref.apply(this, arguments);
  };
}();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _meow = require('meow');

var _meow2 = _interopRequireDefault(_meow);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _gracefulCopy = require('graceful-copy');

var _gracefulCopy2 = _interopRequireDefault(_gracefulCopy);

var _pathExists = require('path-exists');

var _pathExists2 = _interopRequireDefault(_pathExists);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cli = (0, _meow2.default)({
  description: false,
  help: '\n    Generate docs folder\n\n    Usage: ' + _chalk2.default.yellow('docute init [dir] [options]') + '\n\n    Options:\n      ' + _chalk2.default.yellow('--docute-version, --dv') + '       Use specified docute version\n      ' + _chalk2.default.yellow('--help, -h') + '                   Print help\n\n    Examples:\n      docute init --docute-version beta     ' + _chalk2.default.dim('# use beta version of docute') + '\n  '
}, {
  alias: {
    f: 'force',
    dv: 'docute-version',
    h: 'help'
  }
});

function ownDir() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return _path2.default.join.apply(_path2.default, [__dirname, '../../'].concat(args));
}

function cwd() {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return _path2.default.resolve.apply(_path2.default, [process.cwd()].concat(args));
}

run();